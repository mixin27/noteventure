// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    categories,
    notes,
    challengeHistory,
    chaosEvents,
    pointTransactions,
    userProgress,
    achievements,
    activeEffects,
    themes,
    dailyChallenges,
    challengeQuestions,
    appSettings,
    syncLogs,
  ];
  late final Shape0 categories = Shape0(
    source: i0.VersionedTable(
      entityName: 'categories',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_1,
        _column_2,
        _column_3,
        _column_4,
        _column_5,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape1 notes = Shape1(
    source: i0.VersionedTable(
      entityName: 'notes',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_6,
        _column_7,
        _column_4,
        _column_8,
        _column_9,
        _column_10,
        _column_11,
        _column_12,
        _column_13,
        _column_5,
        _column_14,
        _column_15,
        _column_16,
        _column_17,
        _column_18,
        _column_19,
        _column_20,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape2 challengeHistory = Shape2(
    source: i0.VersionedTable(
      entityName: 'challenge_history',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_21,
        _column_22,
        _column_23,
        _column_24,
        _column_25,
        _column_26,
        _column_27,
        _column_28,
        _column_29,
        _column_30,
        _column_31,
        _column_32,
        _column_33,
        _column_34,
        _column_35,
        _column_36,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape3 chaosEvents = Shape3(
    source: i0.VersionedTable(
      entityName: 'chaos_events',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_37,
        _column_38,
        _column_39,
        _column_40,
        _column_41,
        _column_42,
        _column_43,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape4 pointTransactions = Shape4(
    source: i0.VersionedTable(
      entityName: 'point_transactions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_44,
        _column_45,
        _column_46,
        _column_47,
        _column_48,
        _column_49,
        _column_50,
        _column_51,
        _column_20,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape5 userProgress = Shape5(
    source: i0.VersionedTable(
      entityName: 'user_progress',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_52,
        _column_53,
        _column_54,
        _column_55,
        _column_56,
        _column_57,
        _column_58,
        _column_59,
        _column_60,
        _column_61,
        _column_62,
        _column_63,
        _column_64,
        _column_65,
        _column_66,
        _column_67,
        _column_68,
        _column_69,
        _column_8,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape6 achievements = Shape6(
    source: i0.VersionedTable(
      entityName: 'achievements',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_70,
        _column_71,
        _column_72,
        _column_73,
        _column_74,
        _column_75,
        _column_76,
        _column_77,
        _column_78,
        _column_79,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape7 activeEffects = Shape7(
    source: i0.VersionedTable(
      entityName: 'active_effects',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_80,
        _column_81,
        _column_82,
        _column_83,
        _column_84,
        _column_72,
        _column_85,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape8 themes = Shape8(
    source: i0.VersionedTable(
      entityName: 'themes',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_86,
        _column_71,
        _column_72,
        _column_87,
        _column_76,
        _column_77,
        _column_88,
        _column_89,
        _column_90,
        _column_91,
        _column_92,
        _column_93,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape9 dailyChallenges = Shape9(
    source: i0.VersionedTable(
      entityName: 'daily_challenges',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_94,
        _column_21,
        _column_39,
        _column_72,
        _column_95,
        _column_75,
        _column_96,
        _column_97,
        _column_98,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape10 challengeQuestions = Shape10(
    source: i0.VersionedTable(
      entityName: 'challenge_questions',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_21,
        _column_22,
        _column_24,
        _column_25,
        _column_99,
        _column_100,
        _column_101,
        _column_102,
        _column_103,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape11 appSettings = Shape11(
    source: i0.VersionedTable(
      entityName: 'app_settings',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [_column_0, _column_104, _column_105, _column_106],
      attachedDatabase: database,
    ),
    alias: null,
  );
  late final Shape12 syncLogs = Shape12(
    source: i0.VersionedTable(
      entityName: 'sync_logs',
      withoutRowId: false,
      isStrict: false,
      tableConstraints: ['PRIMARY KEY(id)'],
      columns: [
        _column_0,
        _column_107,
        _column_108,
        _column_109,
        _column_110,
        _column_111,
        _column_112,
        _column_113,
        _column_114,
        _column_115,
      ],
      attachedDatabase: database,
    ),
    alias: null,
  );
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get color =>
      columnsByName['color']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get icon =>
      columnsByName['icon']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get sortOrder =>
      columnsByName['sort_order']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'id',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      additionalChecks: i1.GeneratedColumn.checkTextLength(
        minTextLength: 1,
        maxTextLength: 100,
      ),
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'color',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'icon',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_4(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'created_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<int> _column_5(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'sort_order',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get content =>
      columnsByName['content']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get editCount =>
      columnsByName['edit_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get noteType =>
      columnsByName['note_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isLocked =>
      columnsByName['is_locked']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get unlockDate =>
      columnsByName['unlock_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get categoryId =>
      columnsByName['category_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get sortOrder =>
      columnsByName['sort_order']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get color =>
      columnsByName['color']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isPinned =>
      columnsByName['is_pinned']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isFavorite =>
      columnsByName['is_favorite']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get requiredChallengeLevel =>
      columnsByName['required_challenge_level']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isDeleted =>
      columnsByName['is_deleted']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get deletedAt =>
      columnsByName['deleted_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get serverUuid =>
      columnsByName['server_uuid']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'title',
      aliasedName,
      false,
      additionalChecks: i1.GeneratedColumn.checkTextLength(
        minTextLength: 1,
        maxTextLength: 255,
      ),
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'content',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_8(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'updated_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<int> _column_9(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'edit_count',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'note_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultValue: const CustomExpression('\'standard\''),
    );
i1.GeneratedColumn<bool> _column_11(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_locked',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_locked" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<DateTime> _column_12(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'unlock_date',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'category_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES categories (id) ON DELETE SET NULL',
      ),
    );
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'color',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_15(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_pinned',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_pinned" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<bool> _column_16(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_favorite',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_favorite" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'required_challenge_level',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<bool> _column_18(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_deleted',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_deleted" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<DateTime> _column_19(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'deleted_at',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'server_uuid',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get challengeType =>
      columnsByName['challenge_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get difficulty =>
      columnsByName['difficulty']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get difficultyLevel =>
      columnsByName['difficulty_level']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get question =>
      columnsByName['question']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get correctAnswer =>
      columnsByName['correct_answer']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get userAnswer =>
      columnsByName['user_answer']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get wasCorrect =>
      columnsByName['was_correct']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get pointsEarned =>
      columnsByName['points_earned']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get xpEarned =>
      columnsByName['xp_earned']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get timeSpentSeconds =>
      columnsByName['time_spent_seconds']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get timeLimitSeconds =>
      columnsByName['time_limit_seconds']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get wasDoubleOrNothing =>
      columnsByName['was_double_or_nothing']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get wasPartOfStreak =>
      columnsByName['was_part_of_streak']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get completedAt =>
      columnsByName['completed_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get triggerReason =>
      columnsByName['trigger_reason']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get relatedNoteId =>
      columnsByName['related_note_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'challenge_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'difficulty',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_23(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'difficulty_level',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'question',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_25(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'correct_answer',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_26(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'user_answer',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_27(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'was_correct',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("was_correct" IN (0, 1))',
      ),
    );
i1.GeneratedColumn<int> _column_28(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'points_earned',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_29(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'xp_earned',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_30(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'time_spent_seconds',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_31(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'time_limit_seconds',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<bool> _column_32(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'was_double_or_nothing',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("was_double_or_nothing" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<bool> _column_33(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'was_part_of_streak',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("was_part_of_streak" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<DateTime> _column_34(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'completed_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<String> _column_35(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'trigger_reason',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_36(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'related_note_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES notes (id) ON DELETE SET NULL',
      ),
    );

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get eventKey =>
      columnsByName['event_key']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get eventType =>
      columnsByName['event_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get message =>
      columnsByName['message']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get triggeredAt =>
      columnsByName['triggered_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<bool> get wasResolved =>
      columnsByName['was_resolved']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get pointsAwarded =>
      columnsByName['points_awarded']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_37(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'event_key',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_38(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'event_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_39(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'title',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_40(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'message',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_41(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'triggered_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<bool> _column_42(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'was_resolved',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("was_resolved" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_43(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'points_awarded',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get amount =>
      columnsByName['amount']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get reason =>
      columnsByName['reason']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get timestamp =>
      columnsByName['timestamp']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get relatedNoteId =>
      columnsByName['related_note_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get relatedChallengeId =>
      columnsByName['related_challenge_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get relatedEventId =>
      columnsByName['related_event_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get balanceAfter =>
      columnsByName['balance_after']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get serverUuid =>
      columnsByName['server_uuid']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_44(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'amount',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<String> _column_45(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'reason',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_46(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'description',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_47(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'timestamp',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<String> _column_48(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'related_note_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES notes (id) ON DELETE SET NULL',
      ),
    );
i1.GeneratedColumn<String> _column_49(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'related_challenge_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES challenge_history (id) ON DELETE SET NULL',
      ),
    );
i1.GeneratedColumn<String> _column_50(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'related_event_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES chaos_events (id) ON DELETE SET NULL',
      ),
    );
i1.GeneratedColumn<int> _column_51(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'balance_after',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get totalPoints =>
      columnsByName['total_points']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get lifetimePointsEarned =>
      columnsByName['lifetime_points_earned']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get lifetimePointsSpent =>
      columnsByName['lifetime_points_spent']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get level =>
      columnsByName['level']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get currentXp =>
      columnsByName['current_xp']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get xpToNextLevel =>
      columnsByName['xp_to_next_level']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get currentStreak =>
      columnsByName['current_streak']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get longestStreak =>
      columnsByName['longest_streak']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get lastChallengeDate =>
      columnsByName['last_challenge_date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get totalChallengesSolved =>
      columnsByName['total_challenges_solved']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get totalChallengesFailed =>
      columnsByName['total_challenges_failed']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get totalNotesCreated =>
      columnsByName['total_notes_created']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get totalNotesDeleted =>
      columnsByName['total_notes_deleted']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get chaosEnabled =>
      columnsByName['chaos_enabled']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get challengeTimeLimit =>
      columnsByName['challenge_time_limit']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get personalityTone =>
      columnsByName['personality_tone']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get soundEnabled =>
      columnsByName['sound_enabled']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get notificationsEnabled =>
      columnsByName['notifications_enabled']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<int> _column_52(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'total_points',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('100'),
    );
i1.GeneratedColumn<int> _column_53(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'lifetime_points_earned',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_54(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'lifetime_points_spent',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_55(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'level',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('1'),
    );
i1.GeneratedColumn<int> _column_56(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'current_xp',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_57(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'xp_to_next_level',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('100'),
    );
i1.GeneratedColumn<int> _column_58(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'current_streak',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_59(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'longest_streak',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<DateTime> _column_60(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'last_challenge_date',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<int> _column_61(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'total_challenges_solved',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_62(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'total_challenges_failed',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_63(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'total_notes_created',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_64(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'total_notes_deleted',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<bool> _column_65(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'chaos_enabled',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("chaos_enabled" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('1'),
    );
i1.GeneratedColumn<int> _column_66(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'challenge_time_limit',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('30'),
    );
i1.GeneratedColumn<String> _column_67(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'personality_tone',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultValue: const CustomExpression('\'random\''),
    );
i1.GeneratedColumn<bool> _column_68(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'sound_enabled',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("sound_enabled" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('1'),
    );
i1.GeneratedColumn<bool> _column_69(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'notifications_enabled',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("notifications_enabled" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('1'),
    );

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get achievementKey =>
      columnsByName['achievement_key']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get iconName =>
      columnsByName['icon_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get targetValue =>
      columnsByName['target_value']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get currentProgress =>
      columnsByName['current_progress']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isUnlocked =>
      columnsByName['is_unlocked']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get unlockedAt =>
      columnsByName['unlocked_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get pointReward =>
      columnsByName['point_reward']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get rarity =>
      columnsByName['rarity']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_70(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'achievement_key',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'),
    );
i1.GeneratedColumn<String> _column_71(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_72(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'description',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_73(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'icon_name',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_74(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'target_value',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_75(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'current_progress',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<bool> _column_76(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_unlocked',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_unlocked" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<DateTime> _column_77(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'unlocked_at',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<int> _column_78(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'point_reward',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<String> _column_79(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'rarity',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultValue: const CustomExpression('\'common\''),
    );

class Shape7 extends i0.VersionedTable {
  Shape7({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get effectType =>
      columnsByName['effect_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get multiplier =>
      columnsByName['multiplier']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<DateTime> get startedAt =>
      columnsByName['started_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get expiresAt =>
      columnsByName['expires_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<bool> get isActive =>
      columnsByName['is_active']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get relatedEventId =>
      columnsByName['related_event_id']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_80(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'effect_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<double> _column_81(String aliasedName) =>
    i1.GeneratedColumn<double>(
      'multiplier',
      aliasedName,
      false,
      type: i1.DriftSqlType.double,
      defaultValue: const CustomExpression('1.0'),
    );
i1.GeneratedColumn<DateTime> _column_82(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'started_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i1.GeneratedColumn<DateTime> _column_83(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'expires_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<bool> _column_84(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_active',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_active" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('1'),
    );
i1.GeneratedColumn<int> _column_85(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'related_event_id',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'REFERENCES chaos_events (id) ON DELETE SET NULL',
      ),
    );

class Shape8 extends i0.VersionedTable {
  Shape8({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get themeKey =>
      columnsByName['theme_key']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get unlockCost =>
      columnsByName['unlock_cost']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isUnlocked =>
      columnsByName['is_unlocked']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get unlockedAt =>
      columnsByName['unlocked_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<bool> get isActive =>
      columnsByName['is_active']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get primaryColor =>
      columnsByName['primary_color']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get secondaryColor =>
      columnsByName['secondary_color']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get backgroundColor =>
      columnsByName['background_color']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get surfaceColor =>
      columnsByName['surface_color']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get themeStyle =>
      columnsByName['theme_style']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_86(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'theme_key',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'),
    );
i1.GeneratedColumn<int> _column_87(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'unlock_cost',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<bool> _column_88(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_active',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_active" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<String> _column_89(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'primary_color',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_90(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'secondary_color',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_91(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'background_color',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_92(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'surface_color',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_93(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'theme_style',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );

class Shape9 extends i0.VersionedTable {
  Shape9({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get date =>
      columnsByName['date']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get challengeType =>
      columnsByName['challenge_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get title =>
      columnsByName['title']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get description =>
      columnsByName['description']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get targetCount =>
      columnsByName['target_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get currentProgress =>
      columnsByName['current_progress']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get pointReward =>
      columnsByName['point_reward']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get isCompleted =>
      columnsByName['is_completed']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<DateTime> get completedAt =>
      columnsByName['completed_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<DateTime> _column_94(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'date',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
    );
i1.GeneratedColumn<int> _column_95(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'target_count',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<int> _column_96(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'point_reward',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<bool> _column_97(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'is_completed',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("is_completed" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<DateTime> _column_98(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'completed_at',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );

class Shape10 extends i0.VersionedTable {
  Shape10({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get challengeType =>
      columnsByName['challenge_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get difficulty =>
      columnsByName['difficulty']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get question =>
      columnsByName['question']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get correctAnswer =>
      columnsByName['correct_answer']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get wrongAnswers =>
      columnsByName['wrong_answers']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get explanation =>
      columnsByName['explanation']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get category =>
      columnsByName['category']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get timesUsed =>
      columnsByName['times_used']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get lastUsed =>
      columnsByName['last_used']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_99(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'wrong_answers',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_100(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'explanation',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<String> _column_101(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'category',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_102(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'times_used',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<DateTime> _column_103(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'last_used',
      aliasedName,
      true,
      type: i1.DriftSqlType.dateTime,
    );

class Shape11 extends i0.VersionedTable {
  Shape11({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get settingKey =>
      columnsByName['setting_key']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get settingValue =>
      columnsByName['setting_value']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get updatedAt =>
      columnsByName['updated_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_104(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'setting_key',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways('UNIQUE'),
    );
i1.GeneratedColumn<String> _column_105(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'setting_value',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<DateTime> _column_106(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'updated_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
    );

class Shape12 extends i0.VersionedTable {
  Shape12({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get syncType =>
      columnsByName['sync_type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get success =>
      columnsByName['success']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get errorMessage =>
      columnsByName['error_message']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get notesSynced =>
      columnsByName['notes_synced']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get transactionsSynced =>
      columnsByName['transactions_synced']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<bool> get progressSynced =>
      columnsByName['progress_synced']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<int> get conflictsFound =>
      columnsByName['conflicts_found']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get durationMs =>
      columnsByName['duration_ms']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get syncedAt =>
      columnsByName['synced_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_107(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'sync_type',
      aliasedName,
      false,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<bool> _column_108(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'success',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("success" IN (0, 1))',
      ),
    );
i1.GeneratedColumn<String> _column_109(String aliasedName) =>
    i1.GeneratedColumn<String>(
      'error_message',
      aliasedName,
      true,
      type: i1.DriftSqlType.string,
    );
i1.GeneratedColumn<int> _column_110(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'notes_synced',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_111(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'transactions_synced',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<bool> _column_112(String aliasedName) =>
    i1.GeneratedColumn<bool>(
      'progress_synced',
      aliasedName,
      false,
      type: i1.DriftSqlType.bool,
      defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
        'CHECK ("progress_synced" IN (0, 1))',
      ),
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_113(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'conflicts_found',
      aliasedName,
      false,
      type: i1.DriftSqlType.int,
      defaultValue: const CustomExpression('0'),
    );
i1.GeneratedColumn<int> _column_114(String aliasedName) =>
    i1.GeneratedColumn<int>(
      'duration_ms',
      aliasedName,
      true,
      type: i1.DriftSqlType.int,
    );
i1.GeneratedColumn<DateTime> _column_115(String aliasedName) =>
    i1.GeneratedColumn<DateTime>(
      'synced_at',
      aliasedName,
      false,
      type: i1.DriftSqlType.dateTime,
      defaultValue: const CustomExpression(
        'CAST(strftime(\'%s\', CURRENT_TIMESTAMP) AS INTEGER)',
      ),
    );
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) => i0.VersionedSchema.stepByStepHelper(
  step: migrationSteps(from1To2: from1To2),
);
